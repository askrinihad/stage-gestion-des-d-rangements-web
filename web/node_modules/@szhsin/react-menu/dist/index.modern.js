import React, { useCallback, useState, useMemo, useRef, useContext, useEffect, useReducer, useLayoutEffect } from 'react';
import PropTypes from 'prop-types';

const menuContainerClass = 'rc-menu-container';
const menuClass = 'rc-menu';
const menuButtonClass = 'rc-menu-button';
const menuArrowClass = 'arrow';
const menuItemClass = 'item';
const menuDividerClass = 'divider';
const menuHeaderClass = 'header';
const subMenuClass = 'submenu';
const radioGroupClass = 'radio-group';
const initialHoverIndex = -1;
const MenuListContext = /*#__PURE__*/React.createContext({
  hoverIndex: initialHoverIndex
});
const EventHandlersContext = /*#__PURE__*/React.createContext({});
const RadioGroupContext = /*#__PURE__*/React.createContext({});
const SettingsContext = /*#__PURE__*/React.createContext({});
const Keys = Object.freeze({
  'ENTER': 'Enter',
  'ESC': 'Escape',
  'SPACE': ' ',
  'HOME': 'Home',
  'END': 'End',
  'LEFT': 'ArrowLeft',
  'RIGHT': 'ArrowRight',
  'UP': 'ArrowUp',
  'DOWN': 'ArrowDown'
});
const HoverIndexActionTypes = Object.freeze({
  'RESET': 0,
  'SET': 1,
  'UNSET': 2,
  'INCREASE': 3,
  'DECREASE': 4,
  'FIRST': 5,
  'LAST': 6
});
const CloseReason = Object.freeze({
  'CLICK': 'click',
  'CANCEL': 'cancel',
  'BLUR': 'blur',
  'RESIZE': 'resize',
  'SCROLL': 'scroll'
});

const stylePropTypes = name => ({
  [name ? `${name}ClassName` : 'className']: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),
  [name ? `${name}Styles` : 'styles']: PropTypes.oneOfType([PropTypes.object, PropTypes.func])
});
const sharedMenuPropTypes = { ...stylePropTypes(),
  ...stylePropTypes('arrow'),
  'aria-label': PropTypes.string,
  arrow: PropTypes.bool,
  offsetX: PropTypes.number,
  offsetY: PropTypes.number,
  align: PropTypes.oneOf(['start', 'center', 'end']),
  direction: PropTypes.oneOf(['left', 'right', 'top', 'bottom']),
  position: PropTypes.oneOf(['auto', 'anchor', 'initial']),
  overflow: PropTypes.oneOf(['auto', 'visible', 'hidden']),
  children: PropTypes.node.isRequired
};
const menuPropTypesBase = { ...sharedMenuPropTypes,
  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  animation: PropTypes.bool,
  debugging: PropTypes.bool,
  viewScroll: PropTypes.oneOf(['auto', 'close', 'initial']),
  onClick: PropTypes.func
};
const sharedMenuDefaultProp = {
  offsetX: 0,
  offsetY: 0,
  align: 'start',
  direction: 'bottom',
  position: 'auto',
  overflow: 'visible'
};
const menuDefaultPropsBase = { ...sharedMenuDefaultProp,
  animation: true,
  viewScroll: 'initial'
};

const defineName = (component, name) => Object.defineProperty(component, '__name__', {
  value: name,
  writable: false
});
const safeCall = (fn, ...args) => typeof fn === 'function' ? fn(...args) : fn;
const attachHandlerProps = (handlers, props) => {
  const result = {};

  for (const handlerName of Object.keys(handlers)) {
    const handler = handlers[handlerName];
    const propHandler = props[handlerName];
    let attachedHandler;

    if (typeof propHandler === 'function') {
      attachedHandler = e => {
        propHandler(e);
        handler(e);
      };
    } else {
      attachedHandler = handler;
    }

    result[handlerName] = attachedHandler;
  }

  return result;
};
const bem = (block, element, modifiers = {}) => (userClassName, userModifiers) => {
  let blockElement = element ? `${block}__${element}` : block;
  let className = blockElement;

  for (const name of Object.keys(modifiers)) {
    const value = modifiers[name];

    if (value) {
      className += ` ${blockElement}--`;
      className += value === true ? name : `${name}-${value}`;
    }
  }

  if (typeof userClassName === 'function') {
    userClassName = userClassName(userModifiers || modifiers);
  }

  if (typeof userClassName === 'string') {
    userClassName = userClassName.trim();
    if (userClassName) className += ` ${userClassName}`;
  }

  return className;
};

const isObject = obj => obj && typeof obj === 'object';

const flatStyles = (styles, modifiers) => {
  if (typeof styles === 'function') return styles(modifiers);
  if (!isObject(styles)) return undefined;
  if (!modifiers) return styles;
  const style = {};

  for (const prop of Object.keys(styles)) {
    const value = styles[prop];

    if (isObject(value)) {
      const modifierValue = modifiers[prop];

      if (typeof modifierValue === 'string') {
        for (const nestedProp of Object.keys(value)) {
          const nestedValue = value[nestedProp];

          if (isObject(nestedValue)) {
            if (nestedProp === modifierValue) {
              Object.assign(style, nestedValue);
            }
          } else {
            style[nestedProp] = nestedValue;
          }
        }
      } else if (modifierValue) {
        Object.assign(style, value);
      }
    } else {
      style[prop] = value;
    }
  }

  return style;
};

const useActiveState = (isHovering, isDisabled, customKey) => {
  const [active, setActive] = useState(false);
  const activeKeys = useMemo(() => [Keys.SPACE, Keys.ENTER, ...(customKey ? [customKey] : [])], [customKey]);
  const cancelActive = useCallback(() => setActive(false), []);
  return {
    isActive: active,
    onPointerDown: useCallback(() => {
      if (!isDisabled) setActive(true);
    }, [isDisabled]),
    onPointerUp: cancelActive,
    onPointerLeave: cancelActive,
    onKeyDown: useCallback(e => {
      if (isHovering && !isDisabled && activeKeys.includes(e.key)) {
        setActive(true);
      }
    }, [isHovering, isDisabled, activeKeys]),
    onKeyUp: useCallback(e => {
      if (activeKeys.includes(e.key)) {
        setActive(false);
      }
    }, [activeKeys]),
    onBlur: useCallback(e => {
      if (!e.currentTarget.contains(e.relatedTarget)) {
        setActive(false);
      }
    }, [])
  };
};

const useItemState = (disabled, index) => {
  const ref = useRef(null);
  const {
    isParentOpen,
    hoverIndex,
    hoverIndexDispatch
  } = useContext(MenuListContext);
  const isHovering = hoverIndex === index;
  const isDisabled = disabled ? true : undefined;
  useEffect(() => {
    if (isHovering && isParentOpen) {
      ref.current && ref.current.focus();
    }
  }, [isHovering, isParentOpen]);
  return {
    ref,
    isHovering,
    isDisabled,
    setHover: useCallback(() => {
      if (!isDisabled) hoverIndexDispatch({
        type: HoverIndexActionTypes.SET,
        index
      });
    }, [isDisabled, hoverIndexDispatch, index]),
    unsetHover: useCallback(() => {
      hoverIndexDispatch({
        type: HoverIndexActionTypes.UNSET,
        index
      });
    }, [hoverIndexDispatch, index])
  };
};

const useMenuChange = (onChange, isOpen) => {
  const prevOpen = useRef(isOpen);
  useEffect(() => {
    if (prevOpen.current !== isOpen) safeCall(onChange, {
      open: isOpen
    });
    prevOpen.current = isOpen;
  }, [onChange, isOpen]);
};

const FocusPositions = Object.freeze({
  'INITIAL': 'initial',
  'FIRST': 'first',
  'LAST': 'last'
});
const MenuStates = Object.freeze({
  'UNMOUNTED': 0,
  'CLOSED': 1,
  'OPEN': 2
});
const MenuStateActionType = Object.freeze({
  'OPEN': 0,
  'CLOSE': 1,
  'TOGGLE': 2
});
const useMenuState = (keepMounted = true) => {
  const [menuItemFocus, setMenuItemFocus] = useState({
    position: FocusPositions.INITIAL
  });
  const [menuState, dispatch] = useReducer(menuStateReducer, MenuStates.UNMOUNTED);

  function menuStateReducer(state, {
    type
  }) {
    switch (type) {
      case MenuStateActionType.OPEN:
        return MenuStates.OPEN;

      case MenuStateActionType.CLOSE:
        if (state === MenuStates.OPEN) {
          return keepMounted ? MenuStates.CLOSED : MenuStates.UNMOUNTED;
        } else {
          return state;
        }

      case MenuStateActionType.TOGGLE:
        if (state === MenuStates.OPEN) {
          return keepMounted ? MenuStates.CLOSED : MenuStates.UNMOUNTED;
        } else {
          return MenuStates.OPEN;
        }

      default:
        throw new Error('menuStateReducer: unknown action type');
    }
  }

  return {
    isMounted: menuState !== MenuStates.UNMOUNTED,
    isOpen: menuState === MenuStates.OPEN,
    menuItemFocus,
    openMenu: useCallback((menuItemFocus = FocusPositions.INITIAL) => {
      setMenuItemFocus({
        position: menuItemFocus
      });
      dispatch({
        type: MenuStateActionType.OPEN
      });
    }, []),
    closeMenu: useCallback(() => dispatch({
      type: MenuStateActionType.CLOSE
    }), []),
    toggleMenu: useCallback((menuItemFocus = FocusPositions.INITIAL) => {
      setMenuItemFocus({
        position: menuItemFocus
      });
      dispatch({
        type: MenuStateActionType.TOGGLE
      });
    }, [])
  };
};

const useIsomorphicLayoutEffect = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined' ? useLayoutEffect : useEffect;

const MenuButton = defineName( /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function MenuButton({
  className,
  styles,
  isOpen,
  disabled,
  children,
  ...restProps
}, ref) {
  const modifiers = Object.freeze({
    open: isOpen
  });
  return /*#__PURE__*/React.createElement("button", Object.assign({
    "aria-haspopup": "true",
    "aria-expanded": isOpen,
    "aria-disabled": disabled,
    disabled: disabled
  }, restProps, {
    ref: ref,
    className: bem(menuButtonClass, null, modifiers)(className),
    style: flatStyles(styles, modifiers)
  }), children);
})), 'MenuButton');
MenuButton.propTypes = { ...stylePropTypes(),
  isOpen: PropTypes.bool,
  disabled: PropTypes.bool,
  children: PropTypes.node.isRequired,
  onClick: PropTypes.func,
  onKeyDown: PropTypes.func
};

const MenuList = defineName( /*#__PURE__*/React.memo(function MenuList({
  ariaLabel,
  className,
  styles,
  arrowClassName,
  arrowStyles,
  anchorPoint,
  anchorRef,
  containerRef,
  arrow,
  align,
  direction,
  position,
  overflow,
  isOpen,
  isMounted,
  isDisabled,
  menuItemFocus,
  offsetX,
  offsetY,
  children,
  onClose,
  ...restProps
}) {
  const [menuPosition, setMenuPosition] = useState({
    x: 0,
    y: 0
  });
  const [arrowPosition, setArrowPosition] = useState({});
  const [maxHeight, setMaxHeight] = useState(-1);
  const [isClosing, setClosing] = useState(false);
  const [expandedDirection, setExpandedDirection] = useState(direction);
  const {
    animation,
    viewScroll
  } = useContext(SettingsContext);
  const menuRef = useRef(null);
  const arrowRef = useRef(null);
  const menuItemsCount = useRef(0);
  const prevOpen = useRef(isOpen);
  const [hoverIndex, hoverIndexDispatch] = useReducer(hoverIndexReducer, initialHoverIndex);

  function hoverIndexReducer(state, {
    type,
    index
  }) {
    switch (type) {
      case HoverIndexActionTypes.RESET:
        return initialHoverIndex;

      case HoverIndexActionTypes.SET:
        return index;

      case HoverIndexActionTypes.UNSET:
        return state === index ? initialHoverIndex : state;

      case HoverIndexActionTypes.DECREASE:
        {
          let i = state;
          i--;
          if (i < 0) i = menuItemsCount.current - 1;
          return i;
        }

      case HoverIndexActionTypes.INCREASE:
        {
          let i = state;
          i++;
          if (i >= menuItemsCount.current) i = 0;
          return i;
        }

      case HoverIndexActionTypes.FIRST:
        return menuItemsCount.current > 0 ? 0 : initialHoverIndex;

      case HoverIndexActionTypes.LAST:
        return menuItemsCount.current > 0 ? menuItemsCount.current - 1 : initialHoverIndex;

      default:
        throw new Error('hoverIndexReducer: unknown action type');
    }
  }

  const menuItems = useMemo(() => {
    if (!isMounted) return null;
    let index = 0;
    const permittedChildren = ['MenuDivider', 'MenuHeader', 'MenuItem', 'FocusableItem', 'MenuRadioGroup', 'SubMenu'];

    const validateChildren = (parent, child, permitted) => {
      if (!permitted.includes(child.type && child.type.__name__)) {
        console.warn(`${child.type || child} is ignored.\n`, `The permitted children inside a ${parent} are ${permitted.join(', ')}.`);
        return false;
      }

      return true;
    };

    const items = React.Children.map(children, child => {
      if (!validateChildren('Menu or SubMenu', child, permittedChildren)) return null;

      if (child.type.__name__ === 'MenuDivider' || child.type.__name__ === 'MenuHeader') {
        return child;
      } else if (child.type.__name__ === 'MenuRadioGroup') {
        const permittedChildren = ['MenuItem'];
        const props = {
          type: 'radio'
        };
        const radioItems = React.Children.map(child.props.children, radioChild => {
          if (!validateChildren('MenuRadioGroup', radioChild, permittedChildren)) return null;
          return radioChild.props.disabled ? /*#__PURE__*/React.cloneElement(radioChild, props) : /*#__PURE__*/React.cloneElement(radioChild, { ...props,
            index: index++
          });
        });
        return /*#__PURE__*/React.cloneElement(child, {
          children: radioItems
        });
      } else {
        return child.props.disabled ? child : /*#__PURE__*/React.cloneElement(child, {
          index: index++
        });
      }
    });
    menuItemsCount.current = index;
    return items;
  }, [isMounted, children]);

  const handleKeyDown = e => {
    let handled = false;

    switch (e.key) {
      case Keys.HOME:
        hoverIndexDispatch({
          type: HoverIndexActionTypes.FIRST
        });
        handled = true;
        break;

      case Keys.END:
        hoverIndexDispatch({
          type: HoverIndexActionTypes.LAST
        });
        handled = true;
        break;

      case Keys.UP:
        hoverIndexDispatch({
          type: HoverIndexActionTypes.DECREASE
        });
        handled = true;
        break;

      case Keys.DOWN:
        hoverIndexDispatch({
          type: HoverIndexActionTypes.INCREASE
        });
        handled = true;
        break;

      case Keys.SPACE:
        if (e.target && e.target.className.includes(menuClass)) {
          e.preventDefault();
        }

        break;
    }

    if (handled) {
      e.preventDefault();
      e.stopPropagation();
    }
  };

  const handleAnimationEnd = () => {
    if (isClosing) {
      setClosing(false);
      setMaxHeight(-1);
    }
  };

  const positionHelpers = useCallback(() => {
    const menuRect = menuRef.current.getBoundingClientRect();
    const containerRect = containerRef.current.getBoundingClientRect();
    const viewportWidth = document.documentElement.clientWidth;
    const viewportHeight = document.documentElement.clientHeight;

    const getLeftOverflow = x => containerRect.left + x;

    const getRightOverflow = x => containerRect.left + x + menuRect.width - viewportWidth;

    const getTopOverflow = y => containerRect.top + y;

    const getBottomOverflow = y => containerRect.top + y + menuRect.height - viewportHeight;

    const confineHorizontally = x => {
      let leftOverflow = getLeftOverflow(x);

      if (leftOverflow < 0) {
        x -= leftOverflow;
      } else {
        const rightOverflow = getRightOverflow(x);

        if (rightOverflow > 0) {
          x -= rightOverflow;
          leftOverflow = getLeftOverflow(x);
          if (leftOverflow < 0) x -= leftOverflow;
        }
      }

      return x;
    };

    const confineVertically = y => {
      let topOverflow = getTopOverflow(y);

      if (topOverflow < 0) {
        y -= topOverflow;
      } else {
        const bottomOverflow = getBottomOverflow(y);

        if (bottomOverflow > 0) {
          y -= bottomOverflow;
          topOverflow = getTopOverflow(y);
          if (topOverflow < 0) y -= topOverflow;
        }
      }

      return y;
    };

    return {
      menuRect,
      containerRect,
      viewportWidth,
      viewportHeight,
      getLeftOverflow,
      getRightOverflow,
      getTopOverflow,
      getBottomOverflow,
      confineHorizontally,
      confineVertically
    };
  }, [containerRef]);
  const placeArrowX = useCallback((menuX, anchorRect, containerRect, menuRect) => {
    if (!arrow) return;
    let x = anchorRect.left - containerRect.left - menuX + anchorRect.width / 2;
    const offset = arrowRef.current.offsetWidth * 1.25;
    x = Math.max(offset, x);
    x = Math.min(x, menuRect.width - offset);
    setArrowPosition({
      x
    });
  }, [arrow]);
  const placeArrowY = useCallback((menuY, anchorRect, containerRect, menuRect) => {
    if (!arrow) return;
    let y = anchorRect.top - containerRect.top - menuY + anchorRect.height / 2;
    const offset = arrowRef.current.offsetHeight * 1.25;
    y = Math.max(offset, y);
    y = Math.min(y, menuRect.height - offset);
    setArrowPosition({
      y
    });
  }, [arrow]);
  const placeLeftorRight = useCallback(({
    anchorRect,
    containerRect,
    menuRect
  }, {
    placeLeftorRightY,
    placeLeftX,
    placeRightX
  }, {
    getLeftOverflow,
    getRightOverflow,
    confineHorizontally,
    confineVertically
  }) => {
    let computedDirection = direction;
    let y = placeLeftorRightY;

    if (position !== 'initial') {
      y = confineVertically(y);

      if (position === 'anchor') {
        y = Math.min(y, anchorRect.bottom - containerRect.top);
        y = Math.max(y, anchorRect.top - containerRect.top - menuRect.height);
      }
    }

    let x, leftOverflow, rightOverflow;

    if (computedDirection === 'left') {
      x = placeLeftX;

      if (position !== 'initial') {
        leftOverflow = getLeftOverflow(x);

        if (leftOverflow < 0) {
          rightOverflow = getRightOverflow(placeRightX);

          if (rightOverflow <= 0 || -leftOverflow > rightOverflow) {
            x = placeRightX;
            computedDirection = 'right';
          }
        }
      }
    } else {
      x = placeRightX;

      if (position !== 'initial') {
        rightOverflow = getRightOverflow(x);

        if (rightOverflow > 0) {
          leftOverflow = getLeftOverflow(placeLeftX);

          if (leftOverflow >= 0 || -leftOverflow < rightOverflow) {
            x = placeLeftX;
            computedDirection = 'left';
          }
        }
      }
    }

    if (position === 'auto') x = confineHorizontally(x);
    placeArrowY(y, anchorRect, containerRect, menuRect);
    return {
      x,
      y,
      computedDirection
    };
  }, [placeArrowY, direction, position]);
  const placeToporBottom = useCallback(({
    anchorRect,
    containerRect,
    menuRect
  }, {
    placeToporBottomX,
    placeTopY,
    placeBottomY
  }, {
    getTopOverflow,
    getBottomOverflow,
    confineHorizontally,
    confineVertically
  }) => {
    let computedDirection = direction === 'top' ? 'top' : 'bottom';
    let x = placeToporBottomX;

    if (position !== 'initial') {
      x = confineHorizontally(x);

      if (position === 'anchor') {
        x = Math.min(x, anchorRect.right - containerRect.left);
        x = Math.max(x, anchorRect.left - containerRect.left - menuRect.width);
      }
    }

    let y, topOverflow, bottomOverflow;

    if (computedDirection === 'top') {
      y = placeTopY;

      if (position !== 'initial') {
        topOverflow = getTopOverflow(y);

        if (topOverflow < 0) {
          bottomOverflow = getBottomOverflow(placeBottomY);

          if (bottomOverflow <= 0 || -topOverflow > bottomOverflow) {
            y = placeBottomY;
            computedDirection = 'bottom';
          }
        }
      }
    } else {
      y = placeBottomY;

      if (position !== 'initial') {
        bottomOverflow = getBottomOverflow(y);

        if (bottomOverflow > 0) {
          topOverflow = getTopOverflow(placeTopY);

          if (topOverflow >= 0 || -topOverflow < bottomOverflow) {
            y = placeTopY;
            computedDirection = 'top';
          }
        }
      }
    }

    if (position === 'auto') y = confineVertically(y);
    placeArrowX(x, anchorRect, containerRect, menuRect);
    return {
      x,
      y,
      computedDirection
    };
  }, [placeArrowX, direction, position]);
  const positionMenu = useCallback((positionHelpers, anchorRef) => {
    const {
      menuRect,
      containerRect,
      ...helpers
    } = positionHelpers;
    let horizontalOffset = offsetX;
    let verticalOffset = offsetY;

    if (arrow) {
      if (direction === 'left' || direction === 'right') {
        horizontalOffset += arrowRef.current.offsetWidth;
      } else {
        verticalOffset += arrowRef.current.offsetHeight;
      }
    }

    const anchorRect = anchorRef.current.getBoundingClientRect();
    const placeLeftX = anchorRect.left - containerRect.left - menuRect.width - horizontalOffset;
    const placeRightX = anchorRect.right - containerRect.left + horizontalOffset;
    const placeTopY = anchorRect.top - containerRect.top - menuRect.height - verticalOffset;
    const placeBottomY = anchorRect.bottom - containerRect.top + verticalOffset;
    let placeToporBottomX, placeLeftorRightY;

    if (align === 'end') {
      placeToporBottomX = anchorRect.right - containerRect.left - menuRect.width;
      placeLeftorRightY = anchorRect.bottom - containerRect.top - menuRect.height;
    } else if (align === 'center') {
      placeToporBottomX = anchorRect.left - containerRect.left - (menuRect.width - anchorRect.width) / 2;
      placeLeftorRightY = anchorRect.top - containerRect.top - (menuRect.height - anchorRect.height) / 2;
    } else {
      placeToporBottomX = anchorRect.left - containerRect.left;
      placeLeftorRightY = anchorRect.top - containerRect.top;
    }

    placeToporBottomX += horizontalOffset;
    placeLeftorRightY += verticalOffset;
    const rects = {
      anchorRect,
      containerRect,
      menuRect
    };
    const placements = {
      placeLeftX,
      placeRightX,
      placeLeftorRightY,
      placeTopY,
      placeBottomY,
      placeToporBottomX
    };

    switch (direction) {
      case 'left':
      case 'right':
        return placeLeftorRight(rects, placements, helpers);

      case 'top':
      case 'bottom':
      default:
        return placeToporBottom(rects, placements, helpers);
    }
  }, [arrow, align, direction, offsetX, offsetY, placeLeftorRight, placeToporBottom]);
  const positionContextMenu = useCallback((positionHelpers, anchorPoint) => {
    const {
      menuRect,
      containerRect,
      getLeftOverflow,
      getRightOverflow,
      getTopOverflow,
      getBottomOverflow,
      confineHorizontally,
      confineVertically
    } = positionHelpers;
    let x, y;
    x = anchorPoint.x - containerRect.left;
    y = anchorPoint.y - containerRect.top;
    const rightOverflow = getRightOverflow(x);

    if (rightOverflow > 0) {
      const adjustedX = x - menuRect.width;
      const leftOverflow = getLeftOverflow(adjustedX);

      if (leftOverflow >= 0 || -leftOverflow < rightOverflow) {
        x = adjustedX;
      }

      x = confineHorizontally(x);
    }

    let computedDirection = 'bottom';
    const bottomOverflow = getBottomOverflow(y);

    if (bottomOverflow > 0) {
      const adjustedY = y - menuRect.height;
      const topOverflow = getTopOverflow(adjustedY);

      if (topOverflow >= 0 || -topOverflow < bottomOverflow) {
        y = adjustedY;
        computedDirection = 'top';
      }

      y = confineVertically(y);
    }

    return {
      x,
      y,
      computedDirection
    };
  }, []);
  const handlePosition = useCallback(() => {
    const helpers = positionHelpers();
    let results = {
      computedDirection: 'bottom'
    };

    if (anchorPoint) {
      results = positionContextMenu(helpers, anchorPoint);
    } else if (anchorRef) {
      results = positionMenu(helpers, anchorRef);
    }

    let {
      x,
      y,
      computedDirection
    } = results;

    if (overflow !== 'visible') {
      const {
        menuRect,
        getTopOverflow,
        getBottomOverflow
      } = helpers;
      setMaxHeight(height => {
        let newHeight = -1;
        const bottomOverflow = getBottomOverflow(y);

        if (bottomOverflow > 0 || bottomOverflow === 0 && height >= 0) {
          newHeight = menuRect.height - bottomOverflow;
        } else {
          const topOverflow = getTopOverflow(y);

          if (topOverflow < 0 || topOverflow === 0 && height >= 0) {
            newHeight = menuRect.height + topOverflow;
            if (newHeight >= 0) y -= topOverflow;
          }
        }

        return newHeight;
      });
    }

    setMenuPosition({
      x,
      y
    });
    setExpandedDirection(computedDirection);
  }, [anchorPoint, anchorRef, overflow, positionHelpers, positionMenu, positionContextMenu]);
  useIsomorphicLayoutEffect(() => {
    if (isOpen) handlePosition();
  }, [isOpen, handlePosition]);
  useEffect(() => {
    if (!isOpen || viewScroll === 'initial') return;
    let scroll = viewScroll;
    if (scroll === 'auto' && overflow !== 'visible') scroll = 'close';

    const handleScroll = () => {
      if (scroll === 'auto') {
        handlePosition();
      } else {
        safeCall(onClose, {
          reason: CloseReason.SCROLL
        });
      }
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, [isOpen, overflow, onClose, viewScroll, handlePosition]);
  useIsomorphicLayoutEffect(() => {
    if (animation && isMounted) {
      if (isOpen) {
        setClosing(false);
      } else if (isOpen !== prevOpen.current) {
        setClosing(true);
      }
    }

    prevOpen.current = isOpen;
  }, [animation, isMounted, isOpen]);
  useEffect(() => {
    if (!isOpen) {
      hoverIndexDispatch({
        type: HoverIndexActionTypes.RESET
      });
      if (!animation) setMaxHeight(-1);
    }

    const id = setTimeout(() => {
      if (!isOpen || menuRef.current.contains(document.activeElement)) return;
      menuRef.current.focus();

      if (menuItemFocus.position === FocusPositions.FIRST) {
        hoverIndexDispatch({
          type: HoverIndexActionTypes.FIRST
        });
      } else if (menuItemFocus.position === FocusPositions.LAST) {
        hoverIndexDispatch({
          type: HoverIndexActionTypes.LAST
        });
      }
    }, 100);
    return () => clearTimeout(id);
  }, [animation, isOpen, menuItemFocus]);
  const context = useMemo(() => ({
    isParentOpen: isOpen,
    hoverIndex,
    hoverIndexDispatch
  }), [isOpen, hoverIndex]);
  const modifiers = {
    open: isOpen,
    closing: isClosing,
    animation,
    dir: animation && expandedDirection
  };
  const userModifiers = Object.freeze({ ...modifiers,
    dir: expandedDirection
  });
  const arrowModifiers = Object.freeze({
    dir: expandedDirection
  });
  let overflowStyles = null;

  if (maxHeight >= 0) {
    overflowStyles = {
      maxHeight,
      overflow
    };
  }

  const handlers = attachHandlerProps({
    onKeyDown: handleKeyDown,
    onAnimationEnd: handleAnimationEnd
  }, restProps);
  return /*#__PURE__*/React.createElement(React.Fragment, null, isMounted && /*#__PURE__*/React.createElement("ul", Object.assign({
    role: "menu",
    tabIndex: "-1",
    "aria-disabled": isDisabled,
    "aria-label": ariaLabel
  }, restProps, handlers, {
    ref: menuRef,
    className: bem(menuClass, null, modifiers)(className, userModifiers),
    style: { ...flatStyles(styles, userModifiers),
      ...overflowStyles,
      left: `${menuPosition.x}px`,
      top: `${menuPosition.y}px`
    }
  }), arrow && /*#__PURE__*/React.createElement("div", {
    className: bem(menuClass, menuArrowClass, arrowModifiers)(arrowClassName),
    style: { ...flatStyles(arrowStyles, arrowModifiers),
      left: arrowPosition.x && `${arrowPosition.x}px`,
      top: arrowPosition.y && `${arrowPosition.y}px`
    },
    ref: arrowRef,
    role: "presentation"
  }), /*#__PURE__*/React.createElement(MenuListContext.Provider, {
    value: context
  }, menuItems)));
}), 'MenuList');

const useMenuList = (menuListProps, id, animation, debugging, viewScroll, onClick, onClose, skipClick) => {
  const containerRef = useRef(null);
  const settings = useMemo(() => ({
    animation,
    debugging,
    viewScroll
  }), [animation, debugging, viewScroll]);
  const eventHandlers = useMemo(() => ({
    handleClick(event, isStopPropagation, isCheckorRadio) {
      if (!isCheckorRadio || event.key !== Keys.SPACE) {
        safeCall(onClose, {
          key: event.key,
          reason: CloseReason.CLICK
        });
      }

      if (!isStopPropagation) safeCall(onClick, event);
    },

    handleClose(key) {
      safeCall(onClose, {
        key,
        reason: CloseReason.CLICK
      });
    }

  }), [onClick, onClose]);

  const handleKeyDown = ({
    key
  }) => {
    switch (key) {
      case Keys.ESC:
        safeCall(onClose, {
          key,
          reason: CloseReason.CANCEL
        });
        break;
    }
  };

  const handleBlur = e => {
    if (menuListProps.isOpen && !e.currentTarget.contains(e.relatedTarget) && !debugging) {
      safeCall(onClose, {
        reason: CloseReason.BLUR
      });

      if (skipClick) {
        skipClick.current = true;
        setTimeout(() => skipClick.current = false, 300);
      }
    }
  };

  return /*#__PURE__*/React.createElement("div", {
    id: id,
    className: bem(menuContainerClass)(),
    role: "presentation",
    ref: containerRef,
    onKeyDown: handleKeyDown,
    onBlur: handleBlur
  }, /*#__PURE__*/React.createElement(SettingsContext.Provider, {
    value: settings
  }, /*#__PURE__*/React.createElement(EventHandlersContext.Provider, {
    value: eventHandlers
  }, /*#__PURE__*/React.createElement(MenuList, Object.assign({}, menuListProps, {
    containerRef: containerRef,
    onClose: onClose
  })))));
};

const Menu = /*#__PURE__*/React.memo(function Menu({
  'aria-label': ariaLabel,
  id,
  animation,
  debugging,
  viewScroll,
  keepMounted,
  menuButton,
  onClick,
  onChange,
  ...restProps
}) {
  const {
    isMounted,
    isOpen,
    menuItemFocus,
    openMenu,
    closeMenu
  } = useMenuState(keepMounted);
  useMenuChange(onChange, isOpen);
  const skipClick = useRef(false);
  const buttonRef = useRef(null);
  const button = safeCall(menuButton, {
    open: isOpen
  });
  if (!button) throw new Error('Menu requires a menuButton prop.');
  const handleClose = useCallback(e => {
    closeMenu();
    if (e.key) buttonRef.current.focus();
  }, [closeMenu]);
  const handleClick = useCallback(e => {
    if (skipClick.current) return;
    openMenu(e.detail === 0 ? FocusPositions.FIRST : FocusPositions.INITIAL);
  }, [openMenu]);
  const handleKeyDown = useCallback(e => {
    let handled = false;

    switch (e.key) {
      case Keys.UP:
        openMenu(FocusPositions.LAST);
        handled = true;
        break;

      case Keys.DOWN:
        openMenu(FocusPositions.FIRST);
        handled = true;
        break;
    }

    if (handled) e.preventDefault();
  }, [openMenu]);
  const renderButton = useMemo(() => {
    const buttonProps = {
      ref: buttonRef,
      ...attachHandlerProps({
        onClick: handleClick,
        onKeyDown: handleKeyDown
      }, button.props)
    };

    if (button.type.__name__ === 'MenuButton') {
      buttonProps.isOpen = isOpen;
    }

    return /*#__PURE__*/React.cloneElement(button, buttonProps);
  }, [button, isOpen, handleClick, handleKeyDown]);
  const menuList = useMenuList({ ...restProps,
    ariaLabel: ariaLabel || (typeof button.props.children === 'string' ? button.props.children : 'Menu'),
    anchorRef: buttonRef,
    isOpen,
    isMounted,
    menuItemFocus
  }, id, animation, debugging, viewScroll, onClick, handleClose, skipClick);
  return /*#__PURE__*/React.createElement(React.Fragment, null, renderButton, menuList);
});
Menu.propTypes = { ...menuPropTypesBase,
  keepMounted: PropTypes.bool,
  menuButton: PropTypes.oneOfType([PropTypes.element, PropTypes.func]).isRequired,
  onChange: PropTypes.func
};
Menu.defaultProps = { ...menuDefaultPropsBase,
  keepMounted: true
};

const ControlledMenu = /*#__PURE__*/React.memo(function ControlledMenu({
  'aria-label': ariaLabel,
  id,
  animation,
  debugging,
  viewScroll,
  onClick,
  onClose,
  ...restProps
}) {
  return useMenuList({ ...restProps,
    ariaLabel: ariaLabel || 'Menu'
  }, id, animation, debugging, viewScroll, onClick, onClose);
});
ControlledMenu.propTypes = { ...menuPropTypesBase,
  anchorPoint: PropTypes.exact({
    x: PropTypes.number,
    y: PropTypes.number
  }),
  anchorRef: PropTypes.object,
  isOpen: PropTypes.bool,
  isMounted: PropTypes.bool,
  menuItemFocus: PropTypes.exact({
    position: PropTypes.string
  }),
  onClose: PropTypes.func
};
ControlledMenu.defaultProps = { ...menuDefaultPropsBase,
  isMounted: true,
  menuItemFocus: {
    position: FocusPositions.INITIAL
  }
};

const SubMenu = defineName( /*#__PURE__*/React.memo(function SubMenu({
  'aria-label': ariaLabel,
  itemClassName,
  itemStyles,
  disabled,
  keepMounted,
  label,
  index,
  onChange,
  ...restProps
}) {
  const {
    isMounted,
    isOpen,
    menuItemFocus,
    openMenu,
    closeMenu
  } = useMenuState(keepMounted);
  const {
    isParentOpen,
    hoverIndex,
    hoverIndexDispatch
  } = useContext(MenuListContext);
  const {
    debugging
  } = useContext(SettingsContext);
  const isHovering = hoverIndex === index;
  const isDisabled = disabled ? true : undefined;
  const {
    isActive,
    onKeyUp,
    ...activeStateHandlers
  } = useActiveState(isHovering, isDisabled, Keys.RIGHT);
  const containerRef = useRef(null);
  const itemRef = useRef(null);
  const timeoutId = useRef();
  useMenuChange(onChange, isOpen);
  const handleClose = useCallback(() => {
    itemRef.current.focus();
  }, []);

  const handleMouseEnter = () => {
    if (isDisabled) return;
    hoverIndexDispatch({
      type: HoverIndexActionTypes.SET,
      index
    });
    timeoutId.current = setTimeout(() => {
      timeoutId.current = null;
      if (isParentOpen) openMenu();
    }, 300);
  };

  const handleMouseLeave = () => {
    clearTimeout(timeoutId.current);

    if (!isOpen) {
      hoverIndexDispatch({
        type: HoverIndexActionTypes.UNSET,
        index
      });
    }
  };

  const handleKeyDown = e => {
    let handled = false;

    switch (e.key) {
      case Keys.LEFT:
        if (isOpen) {
          handleClose();
          handled = true;
        }

        break;

      case Keys.RIGHT:
        if (!isOpen) handled = true;
        break;
    }

    if (handled) {
      e.preventDefault();
      e.stopPropagation();
    }
  };

  const handleKeyUp = e => {
    if (!isActive) return;
    onKeyUp(e);

    switch (e.key) {
      case Keys.SPACE:
      case Keys.ENTER:
      case Keys.RIGHT:
        openMenu(FocusPositions.FIRST);
        break;
    }
  };

  const handleBlur = e => {
    if (debugging) return;

    if (!e.currentTarget.contains(e.relatedTarget)) {
      closeMenu();
      hoverIndexDispatch({
        type: HoverIndexActionTypes.UNSET,
        index
      });
    } else if (itemRef.current.contains(e.relatedTarget)) {
      closeMenu();
    }
  };

  useEffect(() => {
    if (isHovering && isParentOpen) {
      itemRef.current.focus();
    } else {
      closeMenu();
    }
  }, [isHovering, isParentOpen, closeMenu]);
  const modifiers = Object.freeze({
    open: isOpen,
    hover: isHovering,
    active: isActive,
    disabled: isDisabled
  });
  return /*#__PURE__*/React.createElement("li", {
    className: bem(menuClass, subMenuClass)(),
    role: "presentation",
    ref: containerRef,
    onKeyDown: handleKeyDown,
    onBlur: handleBlur
  }, /*#__PURE__*/React.createElement("div", Object.assign({
    className: bem(menuClass, menuItemClass, modifiers)(itemClassName),
    style: flatStyles(itemStyles, modifiers),
    role: "menuitem",
    "aria-haspopup": "true",
    "aria-expanded": isOpen,
    "aria-disabled": isDisabled,
    tabIndex: isHovering && !isOpen ? 0 : -1,
    ref: itemRef,
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave,
    onClick: () => !isDisabled && openMenu(),
    onKeyUp: handleKeyUp
  }, activeStateHandlers), safeCall(label, modifiers)), /*#__PURE__*/React.createElement(MenuList, Object.assign({}, restProps, {
    ariaLabel: ariaLabel || (typeof label === 'string' ? label : 'Submenu'),
    anchorRef: itemRef,
    containerRef: containerRef,
    isOpen: isOpen,
    isMounted: isMounted,
    isDisabled: isDisabled,
    menuItemFocus: menuItemFocus,
    onClose: handleClose
  })));
}), 'SubMenu');
SubMenu.propTypes = { ...sharedMenuPropTypes,
  ...stylePropTypes('item'),
  disabled: PropTypes.bool,
  keepMounted: PropTypes.bool,
  label: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,
  onChange: PropTypes.func
};
SubMenu.defaultProps = { ...sharedMenuDefaultProp,
  direction: 'right',
  keepMounted: true
};

const MenuItem = defineName( /*#__PURE__*/React.memo(function MenuItem({
  className,
  styles,
  value,
  href,
  type,
  checked,
  disabled,
  index,
  children,
  onClick,
  ...restProps
}) {
  const {
    ref,
    isHovering,
    isDisabled,
    setHover,
    unsetHover
  } = useItemState(disabled, index);
  const eventHandlers = useContext(EventHandlersContext);
  const radioGroup = useContext(RadioGroupContext);
  const {
    isActive,
    onKeyUp,
    onBlur,
    ...activeStateHandlers
  } = useActiveState(isHovering, isDisabled);
  const isRadio = type === 'radio';
  const isCheckBox = type === 'checkbox';
  const isAnchor = href && !isDisabled && !isRadio && !isCheckBox;

  const handleClick = key => {
    if (isDisabled) return;
    let isStopPropagation = false;
    const event = {
      value,
      key
    };

    if (isCheckBox) {
      event.checked = !checked;
    }

    if (isRadio) {
      event.name = radioGroup.name;
      isStopPropagation = true;
      safeCall(radioGroup.onChange, event);
    } else {
      isStopPropagation = safeCall(onClick, event) === false;
    }

    eventHandlers.handleClick(event, isStopPropagation, isCheckBox || isRadio);
  };

  const handleKeyUp = e => {
    if (!isActive) return;
    onKeyUp(e);

    switch (e.key) {
      case Keys.SPACE:
      case Keys.ENTER:
        if (isAnchor) {
          ref.current.click();
        } else {
          handleClick(e.key);
        }

        break;
    }
  };

  const handleBlur = e => {
    onBlur(e);

    if (!e.currentTarget.contains(e.relatedTarget)) {
      unsetHover(e);
    }
  };

  const modifiers = Object.freeze({
    type,
    disabled: isDisabled,
    hover: isHovering,
    active: isActive,
    checked: isRadio ? radioGroup.value === value : isCheckBox ? !!checked : undefined,
    anchor: isAnchor
  });
  const handlers = attachHandlerProps({ ...activeStateHandlers,
    onMouseEnter: setHover,
    onMouseLeave: unsetHover,
    onKeyUp: handleKeyUp,
    onBlur: handleBlur,
    onClick: () => handleClick()
  }, restProps);
  const menuItemProps = {
    role: isRadio ? 'menuitemradio' : isCheckBox ? 'menuitemcheckbox' : 'menuitem',
    'aria-checked': modifiers.checked,
    'aria-disabled': isDisabled,
    tabIndex: isHovering ? 0 : -1,
    ...restProps,
    ...handlers,
    ref,
    className: bem(menuClass, menuItemClass, modifiers)(className),
    style: flatStyles(styles, modifiers)
  };
  const renderChildren = safeCall(children, modifiers);

  if (isAnchor) {
    return /*#__PURE__*/React.createElement("li", {
      role: "presentation"
    }, /*#__PURE__*/React.createElement("a", Object.assign({}, menuItemProps, {
      href: href
    }), renderChildren));
  } else {
    return /*#__PURE__*/React.createElement("li", menuItemProps, renderChildren);
  }
}), 'MenuItem');
MenuItem.propTypes = { ...stylePropTypes(),
  value: PropTypes.any,
  href: PropTypes.string,
  type: PropTypes.oneOf(['checkbox', 'radio']),
  checked: PropTypes.bool,
  disabled: PropTypes.bool,
  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,
  onClick: PropTypes.func
};

const FocusableItem = defineName( /*#__PURE__*/React.memo(function FocusableItem({
  className,
  styles,
  disabled,
  index,
  children,
  ...restProps
}) {
  const {
    ref,
    isHovering,
    isDisabled,
    setHover,
    unsetHover
  } = useItemState(disabled, index);
  const {
    handleClose
  } = useContext(EventHandlersContext);
  const baseParams = {
    disabled: isDisabled,
    hover: isHovering
  };
  const modifiers = Object.freeze({ ...baseParams,
    focusable: true
  });
  const renderChildren = safeCall(children, { ...baseParams,
    ref,
    closeMenu: handleClose
  });

  const handleBlur = e => {
    if (!e.currentTarget.contains(e.relatedTarget)) {
      unsetHover(e);
    }
  };

  const handlers = attachHandlerProps({
    onMouseEnter: setHover,
    onFocus: setHover,
    onBlur: handleBlur
  }, restProps);
  return /*#__PURE__*/React.createElement("li", Object.assign({
    "aria-disabled": isDisabled,
    role: "menuitem",
    tabIndex: "-1"
  }, restProps, handlers, {
    className: bem(menuClass, menuItemClass, modifiers)(className),
    style: flatStyles(styles, modifiers)
  }), renderChildren);
}), 'FocusableItem');
FocusableItem.propTypes = { ...stylePropTypes(),
  disabled: PropTypes.bool,
  children: PropTypes.func.isRequired
};

const MenuDivider = defineName( /*#__PURE__*/React.memo(function MenuDivider({
  className,
  styles,
  ...restProps
}) {
  return /*#__PURE__*/React.createElement("li", Object.assign({
    role: "separator"
  }, restProps, {
    className: bem(menuClass, menuDividerClass)(className),
    style: flatStyles(styles)
  }));
}), 'MenuDivider');
MenuDivider.propTypes = { ...stylePropTypes()
};

const MenuHeader = defineName( /*#__PURE__*/React.memo(function MenuHeader({
  className,
  styles,
  children,
  ...restProps
}) {
  return /*#__PURE__*/React.createElement("li", Object.assign({
    role: "presentation"
  }, restProps, {
    className: bem(menuClass, menuHeaderClass)(className),
    style: flatStyles(styles)
  }), children);
}), 'MenuHeader');
MenuHeader.propTypes = { ...stylePropTypes()
};

const MenuRadioGroup = defineName( /*#__PURE__*/React.memo(function MenuRadioGroup({
  'aria-label': ariaLabel,
  className,
  styles,
  name,
  value,
  children,
  onChange,
  ...restProps
}) {
  const contextValue = useMemo(() => ({
    name,
    value,
    onChange
  }), [name, value, onChange]);
  return /*#__PURE__*/React.createElement("li", {
    role: "presentation"
  }, /*#__PURE__*/React.createElement("ul", Object.assign({
    role: "group",
    "aria-label": ariaLabel || name || 'Radio group'
  }, restProps, {
    className: bem(menuClass, radioGroupClass)(className),
    style: flatStyles(styles)
  }), /*#__PURE__*/React.createElement(RadioGroupContext.Provider, {
    value: contextValue
  }, children)));
}), 'MenuRadioGroup');
MenuRadioGroup.propTypes = { ...stylePropTypes(),
  'aria-label': PropTypes.string,
  name: PropTypes.string,
  value: PropTypes.any,
  children: PropTypes.node.isRequired,
  onChange: PropTypes.func
};

export { ControlledMenu, FocusableItem, Menu, MenuButton, MenuDivider, MenuHeader, MenuItem, MenuRadioGroup, SubMenu, useMenuState };
